<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Book Manager - Home</title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  <script src="/javascripts/axios.min.js"></script>
  <script src="/javascripts/theme.js"></script>
  <style>
    body { background: var(--main-bg); color: var(--main-text); }

    .theme-switcher {
      position: fixed;
      top: 20px;
      right: 30px;
      z-index: 999;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    .theme-btn {
      padding: 8px 20px;
      border-radius: 6px;
      border: 1px solid var(--input-border, #ccc);
      background: var(--input-bg, #fff);
      color: var(--main-text, #232946);
      font-size: 16px;
      cursor: pointer;
      transition: background 0.2s, color 0.2s;
    }
    .theme-btn.active,
    .theme-btn:focus {
      background: var(--primary, #2563eb);
      color: #fff;
    }

    .header {
      text-align: center;
      margin-bottom: 1em;
    }

    .header h2 {
      color: var(--primary);
      margin-bottom: 0.3em;
    }

    .header a {
      margin: 0 1em;
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
      transition: color 0.2s;
    }

    .header a:hover {
      color: var(--primary);
      text-decoration: underline;
    }

    .main-container {
      display: flex;
      justify-content: space-between;
      gap: 2em;
      max-width: 1200px;
      margin: 0 auto;
      align-items: flex-start;
    }

    #searchForm {
      
      padding: 1.5em;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 1em;
    }

    #searchForm .row {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      align-items: center;
    }

    #searchForm input[type="text"] {
      flex-grow: 1;
      padding: 0.6em;
      border: 1px solid #cbd5e1;
      border-radius: 8px;
      font-size: 1rem;
    }

    #searchForm button {
      background: var(--primary);

      border: none;
      padding: 0.6em 1em;
      border-radius: 8px;
      font-size: 0.95rem;
      cursor: pointer;
      transition: background 0.2s, transform 0.2s;
    }

    #searchForm button:hover {
      background: var(--primary);
      transform: scale(1.03);
    }

    #results {
      margin-top: 1em;
    }

    .book-card, .mybook-card {
      display: flex;
      gap: 15px;
      padding: 1em;

      border: 1px solid #e5e7eb;
      border-radius: 10px;
      margin: 0.8em 0;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      align-items: center;
    }

    .book-card img, .mybook-card img {
      border-radius: 6px;
    }

    .book-info {
      flex: 1;
    }

    .book-info b {
      color: #111827;
      font-size: 1.1rem;
    }

    .book-info p {
      margin: 0.4em 0;
      color: #4b5563;
    }

    .book-card button, .mybook-card button {
      padding: 0.4em 0.8em;
      background: var(--primary);

      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 0.9rem;
      transition: background 0.2s;
    }

    .book-card button:hover, .mybook-card button:hover {
      background: var(--primary);
    }

    .favorites-section {
      flex: 1;

      padding: 1.5em;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }

    .favorites-section h3 {
      color: #374151;
      font-size: 1.2rem;
      margin-bottom: 1em;
      text-align: center;
    }

    #searchForm select {
    padding: 0.6em 1em;
    font-size: 1rem;
    border: 1px solid #cbd5e1;
    border-radius: 8px;

    color: #374151;
    appearance: none;
    cursor: pointer;
    transition: border-color 0.2s, box-shadow 0.2s;
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M6 8l4 4 4-4' stroke='%2363748b' stroke-width='1.5'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-size: 1em;
    padding-right: 2.5em;
  }

  #searchForm select:focus {
    border-color: var(--primary);
    outline: none;
    box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
  }

  .book-fields {
    display: flex;
    flex-wrap: wrap;
    gap: 1em;
    margin: 0.5em 0 0.5em 0;
    align-items: center;
  }
  .field-group {
    display: flex;
    align-items: center;

    border-radius: 6px;
    padding: 0.3em 0.7em;
    gap: 0.3em;
  }
  .field-group label {
    color: var(--primary);
    font-weight: 500;
    margin-right: 0.2em;
  }
  .input-tag, .input-rating, .input-notes {
    border: 1px solid #cbd5e1;
    border-radius: 5px;
    padding: 0.3em 0.7em;
    font-size: 0.95rem;
    transition: border-color 0.2s, box-shadow 0.2s;
  }
  .input-rating {
    width: 50px;
  }
  .input-notes {
    width: 120px;
  }
  .input-tag:focus, .input-rating:focus, .input-notes:focus {
    border-color: var(--primary);
    outline: none;
    box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
  }
  .save-btn {
    background: #22c55e;
    border: none;
    border-radius: 6px;
    padding: 0.4em 1.2em;
    margin-left: 1em;
    font-size: 0.95rem;
    cursor: pointer;
    transition: background 0.2s;
  }
  .save-btn:hover {
    background: #16a34a;
  }
  .book-actions {
    display: flex;
    gap: 1em;
    margin-top: 0.5em;
  }
  .save-btn, .remove-btn {
    flex: 1 1 0;
    min-width: 80px;
    background: #22c55e;
    border: none;
    border-radius: 6px;
    padding: 0.4em 1.2em;
    font-size: 0.95rem;
    cursor: pointer;
    transition: background 0.2s;
    text-align: center;
  }
  .remove-btn {
    background: #ef4444;
  }
  .save-btn:hover {
    background: #16a34a;
  }
  .remove-btn:hover {
    background: #b91c1c;
  }

  </style>
</head>
<body>
  <div class="theme-switcher">
    <button class="theme-btn" onclick="toggleTheme('light')">Light</button>
    <button class="theme-btn" onclick="toggleTheme('dark')">Dark</button>
  </div>
  <div class="header">
    <h2>Welcome, <%= user.user_name %>!</h2>
    <a href="/users/profile">Profile</a> | 
    <a href="/users/logout">Logout</a>
  </div>

  <div class="main-container">
    <!-- Search Section -->
    <form id="searchForm">
      <div class="row">
        <input type="text" id="keyword" placeholder="Enter keywords such as book title or author" required />
        <select id="searchType">
          <option value="title">Title</option>
          <option value="author">Author</option>
        </select>
        <button type="submit">Search</button>
      </div>
      <div class="row">
        <button type="button" onclick="setSort('')" id="sortDefault" style="color:#ff4d00;">Comprehensive Sort</button>
        <button type="button" onclick="setSort('publishedDate')" id="sortPublished">Publication Date</button>
        <button type="button" onclick="setSort('title')" id="sortTitle">Title Relevance</button>
      </div>
      <div id="results"></div>
    </form>

    <!-- Favorites Section -->
    <div class="favorites-section">
      <h3>My Favorites</h3>
      <div id="mybooks"></div>
    </div>
  </div>

  <script>
    let currentSort = '';
    let descLenMin = 0;
    let descLenMax = 0;

    function setSort(s) {
      currentSort = s;
      highlightSortBtn(s);
      document.getElementById('searchForm').onsubmit();
    }

    function toggleTheme(mode) {
      if (!mode) {
        mode = document.body.classList.contains('dark') ? 'light' : 'dark';
      }
      if (mode === 'dark') {
        document.body.classList.add('dark');
        localStorage.setItem('theme', 'dark');
      } else {
        document.body.classList.remove('dark');
        localStorage.setItem('theme', 'light');
      }
      document.querySelectorAll('.theme-btn').forEach(btn => {
        btn.classList.toggle('active', btn.textContent.includes(mode === 'dark' ? 'dark' : 'light'));
      });
    }
    window.addEventListener('DOMContentLoaded', function() {
      const theme = localStorage.getItem('theme') || 'light';
      if (theme === 'dark') document.body.classList.add('dark');
      const btns = document.querySelectorAll('.theme-btn');
      btns.forEach(btn => {
        btn.classList.toggle('active', btn.textContent.includes(theme === 'dark' ? 'dark' : 'light'));
      });
    });

    function displayBooks(books) {
      
    }

    function highlightSortBtn(s) {
      document.getElementById('sortDefault').style.color = s === '' ? '#ff4d00' : '';
      document.getElementById('sortPublished').style.color = s === 'publishedDate' ? '#ff4d00' : '';
      document.getElementById('sortTitle').style.color = s === 'title' ? '#ff4d00' : '';
    }

    document.getElementById('searchForm').onsubmit = async function(e) {
      if (e) e.preventDefault();
      const keyword = document.getElementById('keyword').value;
      const searchType = document.getElementById('searchType').value;
      const res = await axios.post('/users/search_books', {
        keyword,
        searchType,
        sortBy: currentSort,
        descLenMin,
        descLenMax
      });
      const books = res.data.items || [];
      let html = '';
      books.forEach(book => {
        const info = book.volumeInfo;
        html += `<div class="book-card">
          <img src='${info.imageLinks?.thumbnail || ''}' width='80' />
          <div class="book-info">
            <b>${info.title}</b>
            <p>Author：${(info.authors || []).join(', ')}</p>
            <button onclick='collectBook("${book.id}")'>Collect</button>
          </div>
        </div>`;
      });
      document.getElementById('results').innerHTML = html;
    };

    async function collectBook(bookId) {
      const res = await axios.post('/users/collect_book', { bookId });
      alert(res.data.message || 'Already collected！');
      loadMyBooks();
    }

    async function loadMyBooks() {
      const res = await axios.get('/users/mybooks');
      const books = res.data.books || [];
      let html = '';
      books.forEach(book => {
        html += `<div class="mybook-card">
          <img src='${book.cover_image || book.cover || ''}' width='60' />
          <div class="book-info">
            <b>${book.title}</b>
            <p>${book.authors}</p>
            <div class="book-fields">
              <div class="field-group">
                <label>Tag:</label>
                <input type='text' class='input-tag' value='${book.tags || ''}' onchange='updateField(this, "tags", "${book.book_id}")' />
              </div>
              <div class="field-group">
                <label>Rating:</label>
                <input type='number' min='1' max='5' class='input-rating' value='${book.rating || ''}' onchange='updateField(this, "rating", "${book.book_id}")' />
              </div>
              <div class="field-group">
                <label>Notes:</label>
                <input type='text' class='input-notes' value='${book.notes || ''}' onchange='updateField(this, "notes", "${book.book_id}")' />
              </div>
            </div>
            <div class="book-actions">
              <button class="save-btn" onclick='saveBookInfo("${book.book_id}")'>Save</button>
              <button class="remove-btn" onclick='removeBook("${book.book_id}")'>Remove</button>
            </div>
          </div>
        </div>`;
      });
      document.getElementById('mybooks').innerHTML = html;
    }

    function updateField(input, field, bookId) {
      if (!bookEditCache[bookId]) bookEditCache[bookId] = {};
      bookEditCache[bookId][field] = input.value;
    }
    let bookEditCache = {};
    async function saveBookInfo(bookId) {
      const data = bookEditCache[bookId] || {};
      data.bookId = bookId;
      await axios.post('/users/update_book', data);
      alert('Saved successfully');
      loadMyBooks();
    }

    async function removeBook(bookId) {
      if (!confirm('Delete this book?')) return;
      await axios.post('/users/remove_book', { bookId });
      loadMyBooks();
    }

    loadMyBooks();
  </script>
</body>
</html>
